{
	"info": {
		"_postman_id": "299783d4-3f6b-4e24-bd10-7c94b78df0a8",
		"name": "HW#2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23603943"
	},
	"item": [
		{
			"name": "right string",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body have right string\", function () {\r",
							"   pm.response.to.have.body();\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let resp_f = pm.response.json()\r",
							"//\r",
							"let resp_age = +resp_f.age\r",
							"\r",
							"console.log(resp_age)\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"       pm.expect(resp_f.name).to.eql(\"Vadim\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"       pm.expect(resp_age).to.eql(28);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"       pm.expect(resp_f.salary).to.eql(1000);\r",
							"});\r",
							"//Спарсить request.\r",
							"let req_f = request.data\r",
							"let req_salary = +req_f.salary\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"       pm.expect(req_f.name).to.eql(resp_f.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age qsp\", function () {\r",
							"       pm.expect(req_f.age).to.eql(resp_f.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary qsp\", function () {\r",
							"       pm.expect(req_salary).to.eql(resp_f.salary);\r",
							"});\r",
							"console.log(\"req_f.salary = \" + typeof req_f.salary)\r",
							"console.log(\"resp_f.salary = \" + typeof resp_f.salary)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_y\", function () {\r",
							"       pm.expect(resp_f.family.u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(resp_f)\r",
							"console.log(req_f.name)\r",
							"console.log(resp_f.family)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vadim&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							"let resp_f = JSON.parse(responseBody)\r",
							"//Спарсить request.\r",
							"let req_f = request.data\r",
							"let resp_name = resp_f.name\r",
							"console.log(req_f.salary)\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_f.name);\r",
							"});\r",
							"console.log(req_f.name)\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_f.age).to.eql(req_f.age);\r",
							"});\r",
							"console.log(req_f.age)\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_f.salary).to.eql(+req_f.salary);\r",
							"});\r",
							"console.log(\"salary = \", +req_f.salary, typeof req_f.salary)\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(resp_f.family)\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Check that param 'name' exists in object 'dog'\", function () { const jsonData = pm.response.json();\r",
							"if (jsonData.family.pets.dog.name !== undefined)\r",
							"{pm.expect(true).to.be.true;} else {pm.expect(false).to.be.true;\r",
							"} \r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check that parametr 'age' exists in object 'dog'\", function () { const jsonData = pm.response.json();\r",
							"if (jsonData.family.pets.dog.age !== undefined)\r",
							"{pm.expect(true).to.be.true;} else {pm.expect(false).to.be.true;\r",
							"} \r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check that parametr 'Luky' exists in object 'name'\", function () { const jsonData = pm.response.json();\r",
							"if (jsonData.family.pets.dog.name == 'Luky')\r",
							"{pm.expect(true).to.be.true;} else {pm.expect(false).to.be.true;\r",
							"} \r",
							"});\r",
							"console.log(resp_f.family.pets.dog.age)\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check that parametr 'age' exists in object '4'\", function () { const jsonData = pm.response.json();\r",
							"if (jsonData.family.pets.dog.age == '4')\r",
							"{pm.expect(true).to.be.true;} else {pm.expect(false).to.be.true;\r",
							"} \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"contentType": "string"
						},
						{
							"key": "age",
							"value": "28",
							"contentType": "integer"
						},
						{
							"key": "salary",
							"value": "1000",
							"contentType": "integer"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vadim&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// cтатус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"//Спарсить request.\r",
							"let req_f = request.data\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"pm.expect(resp_f.name).to.eql(req_f.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"pm.expect(resp_f.age).to.eql(+req_f.age);\r",
							"});\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req_f.salary);\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(resp_f.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"resp_salary_0 = \", resp_f.salary [0])\r",
							"//Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(\"resp_salary_1 = \", resp_f.salary [1])\r",
							"//Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(\"resp_salary_2 = \", resp_f.salary [2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0 param salary\", function() {\r",
							"pm.expect(resp_f.salary[0]).to.eql(+req_f.salary);\r",
							"})\r",
							"console.log(resp_f.salary[0])\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1 param salary\", function() {\r",
							"pm.expect(+resp_f.salary[1]).to.eql(+req_f.salary * 2);\r",
							"})\r",
							"console.log(+resp_f.salary[1])\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2 param salary\", function() {\r",
							"pm.expect(+resp_f.salary[2]).to.eql(+req_f.salary * 3);\r",
							"})\r",
							"console.log(+resp_f.salary[2])\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\")\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_f.name)\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_f.age)\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_f.salary)\r",
							"console.log(\"==========\")\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let obj_k = Object.keys(resp_f.salary)\r",
							"let obj_v = Object.values(resp_f.salary)\r",
							"\r",
							"for (let i = 0; i < obj_k.length; i += 1)\r",
							"    console.log(obj_v[i])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vadim&age=28&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json\r",
							"let resp_d = pm.response.json();\r",
							"//Спарсить request\r",
							"let req_d = request.data;\r",
							"console.log(req_d)\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"pm.expect(resp_d).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"pm.expect(resp_d).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"pm.expect(resp_d).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(resp_d).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_year\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(resp_d).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response person\", function () {\r",
							"pm.expect(resp_d).to.have.property(\"person\");\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary = salary\", function () {\r",
							"pm.expect(resp_d.start_qa_salary).to.eql(+req_d.salary);\r",
							"});\r",
							"console.log(\"start_salary = \" + req_d.salary)\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_6_mths = salary*2\", function () {\r",
							"pm.expect(resp_d.qa_salary_after_6_months).to.eql(+req_d.salary * 2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_12_mths = salary*2.7\", function () {\r",
							"pm.expect(resp_d.qa_salary_after_12_months).to.eql(+req_d.salary * 2.7);\r",
							"});\r",
							"console.log(\"12 mnths = \" + resp_d.qa_salary_after_12_months);\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_1.5_y = salary*3.3\", function () {\r",
							"pm.expect(resp_d[\"qa_salary_after_1.5_year\"]).to.eql(+req_d.salary * 3.3);\r",
							"});\r",
							"console.log(\"1.5 year = \" + resp_d[\"qa_salary_after_1.5_year\"]);\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_3.5_y = salary*3.3\", function () {\r",
							"pm.expect(resp_d[\"qa_salary_after_3.5_years\"]).to.eql(+req_d.salary * 3.8);\r",
							"});\r",
							"console.log(\"3.5 year = \" + resp_d[\"qa_salary_after_3.5_years\"]);\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 1 u_name = salary\", function () {\r",
							"pm.expect(resp_d.person.u_name[1]).to.eql(+req_d.salary);\r",
							"});\r",
							"console.log(\"1 u_name = \" + resp_d.person.u_name[1]);\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age = req_age\", function () {\r",
							"pm.expect(resp_d.person.u_age).to.eql(+req_d.age);\r",
							"});\r",
							"console.log(\"u_age = \" + resp_d.person.u_age);\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_5_y = salary*4.2\", function () {\r",
							"pm.expect(resp_d.person.u_salary_5_years).to.eql(+req_d.salary * 4.2);\r",
							"});\r",
							"console.log(\"5 years = \" + resp_d.person.u_salary_5_years);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in resp_d.person) {\r",
							"    console.log(key, resp_d.person[key])\r",
							"}\r",
							"//pm.test(\"Check req_sal type string\", function () {\r",
							"//pm.expect(req_d.salary).to.be(\"string\"); });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}